1) kubectl describe secret -n kube-system

2) kubectl proxy

3) http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login

4) Enter the token got from 1st step

Elastic
-------------------------------------
kubectl apply -f elastic-api.yaml

Discount
-------------------------------------
kubectl apply -f discount-secret.yaml
kubectl apply -f discount-db-pv.yaml 
kubectl apply -f discount-api-configmap.yaml
kubectl apply -f discount-db.yaml
kubectl apply -f discount-grpc.yaml

Basket
-------------------------------------
kubectl apply -f cache-configmap.yaml
kubectl apply -f grpc-configmap.yaml
kubectl apply -f basket-db.yaml 
kubectl apply -f basket-eventbus-configmap.yaml 
kubectl apply -f basket-api.yaml

Catalog
-------------------------------------
kubectl apply -f mongo-secret.yaml
kubectl apply -f mongo-configmap.yaml
kubectl apply -f catalog-db.yaml 
kubectl apply -f catalog-api.yaml

Ordering
-------------------------------------
kubectl apply -f ordering-secret.yaml
kubectl apply -f ordering-db-pv.yaml
kubectl apply -f ordering-db.yaml
kubectl apply -f ordering-api-configmap.yaml 
kubectl apply -f ordering-api.yaml 

For Deleting all resources
kubectl delete all --all


//ACR 
docker tag basketapi:latest eshopacr.azurecr.io/basketapi:v1
docker push eshopacr.azurecr.io/basketapi:v1
az acr repository list --name eshopacr --output table

TODO az aks creation command needed

This will merge the aks context with local kube context
az aks get-credentials --admin --name eshopCluster --resource-group aks-rah-sahay 

//Create Image pull secret for pulling image from ACR

kubectl create secret docker-registry acr-secret --docker-server=eshopacr.azurecr.io --docker-username=eshopacr --docker-password=QkNSi1ykT+u6n7+oJxyoIvfS6kWjPzsLrTS8UgYunm+ACRCjZDrt --docker-email=rahulsahay19@gmail.com

//ACR Login
az acr login --name eshopacr

kubectl apply -f mongo-secret.yaml
kubectl apply -f mongo-configmap.yaml
kubectl apply -f catalog-db.yaml 
kubectl apply -f catalog-api.yaml


AKS dashboard
TODO 

https://www.linkedin.com/pulse/deploying-rabbitmq-cluster-kubernetes-part-1-darshana-dinushal/ 
kubectl create ns rabbits
kubectl create -n rabbits -f rabbit-configmap.yaml
kubectl create -n rabbits -f rabbit-rbac.yaml
kubectl get storageclass
Then replace the storage class name
kubectl create -n rabbits -f rabbitmq.yaml

kubectl apply -f discount-secret.yaml 
kubectl apply -f discount-db-pv.yaml  
kubectl apply -f discount-api-configmap.yaml
kubectl apply -f discount-db.yaml   
kubectl apply -f discount-grpc.yaml

kubectl apply -f grpc-configmap.yaml 
kubectl apply -f cache-configmap.yaml 
kubectl apply -f basket-db.yaml 

check https://rajanieshkaushikk.com/2021/02/27/how-to-deploy-sql-server-containers-to-a-kubernetes-cluster-for-high-availability/

kubectl create secret generic mssql --from-literal=MSSQL_SA_PASSWORD="MyC0m9l&xP@ssw0rd"

kubectl port-forward service/kibana 5602:5601

Istio
kubectl apply -f 1-istio-init.yaml
kubectl apply -f 2-istio-minikube.yaml
kubectl apply -f 3-kiali-secret.yaml

containers running in Istio system
kubectl get po -n istio-system

Enabling Istio
kubectl label namespace default istio-injection=enabled

//Applying Istio addons. Run the below command from istio folder

kubectl apply -f samples/addons
